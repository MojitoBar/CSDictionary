enum DB {
    static let CSSections: [String] = ["자료구조", "알고리즘", "네트워크", "컴퓨터 구조", "운영체제", "프로그래밍 언어"]
    static let SearchSection: [String] = ["검색 결과"]
    static let questionList = [
        CSQuestion(question: "삽입 정렬이 다른 정렬 알고리즘(예: 선택 정렬, 버블 정렬)에 비해 유리한 경우는 어떤 상황인가요?",
                   answer: """
                   배열은 컴퓨터 과학에서 기본적이면서 중요한 자료구조 중 하나입니다.

                   배열은 고정된 크기를 가지며, 각 요소는 고유한 인덱스로 식별됩니다. 배열의 요소는 메모리상에서 연속적으로 위치하기 때문에, 인덱스를 통한 요소의 접근이 매우 빠르다는 장점이 있습니다.

                   하지만, 크기가 고정되어 있기 때문에 배열의 크기를 동적으로 변경하기 어렵고, 크기를 변경하려면 새로운 배열을 생성하고 기존의 데이터를 복사해야 하는 단점이 있습니다.

                   ![image](https://libapps-au.s3-ap-southeast-2.amazonaws.com/accounts/206137/images/%EB%B0%B0%EC%97%B4_%ED%98%95%ED%83%9C.jpg)

                   ### ㅁㄴㅇㄹㅁㄴㅇㄹㅁㄴㅇㄹ

                   ㅁㄴㅇㄹㅁㄴㅇ **굵은 텍스트** *기울인 텍스트* 잘 되는구나 ~~~
                   ![image](https://libapps-au.s3-ap-southeast-2.amazonaws.com/accounts/206137/images/%EB%B0%B0%EC%97%B4_%ED%98%95%ED%83%9C.jpg)
                   
                   # asdfadsfas adfasdf fsfdas
                   
                   asdfasdfad
                   
                   **asdf**
                   
                   # asdfasd
                   """,
                   category: "자료구조", 
                   tailQuestion: ["삽입 정렬의 시간 복잡도와 최악의 경우 시간 복잡도는 각각 무엇인가요?"]),
        CSQuestion(question: "삽입 정렬이 다른 정렬 알고리즘(예: 선택 정렬, 버블 정렬)에 비해 유리한 경우는 어떤 상황인가요?",
                   answer: """
                   삽입 정렬은 주로 거의 정렬된 데이터나 데이터 크기가 작을 때 다른 정렬 알고리즘에 비해 효율적입니다.
                   
                   이는 삽입 정렬이 데이터를 적절한 위치에 삽입해야 하므로 이미 정렬된 부분은 크게 이동하지 않아도 되기 때문입니다. 따라서, 데이터가 이미 거의 정렬된 상태거나 데이터 크기가 작을 때 삽입 정렬은 선택 정렬이나 버블 정렬보다 빠르게 동작할 수 있습니다.
                   """,
                   category: "알고리즘",
                   tailQuestion: ["삽입 정렬의 시간 복잡도와 최악의 경우 시간 복잡도는 각각 무엇인가요?"]),
        CSQuestion(question: "삽입 정렬이 다른 정렬 알고리즘(예: 선택 정렬, 버블 정렬)에 비해 유리한 경우는 어떤 상황인가요?",
                   answer: """
                   삽입 정렬은 주로 거의 정렬된 데이터나 데이터 크기가 작을 때 다른 정렬 알고리즘에 비해 효율적입니다.
                   
                   이는 삽입 정렬이 데이터를 적절한 위치에 삽입해야 하므로 이미 정렬된 부분은 크게 이동하지 않아도 되기 때문입니다. 따라서, 데이터가 이미 거의 정렬된 상태거나 데이터 크기가 작을 때 삽입 정렬은 선택 정렬이나 버블 정렬보다 빠르게 동작할 수 있습니다.
                   """,
                   category: "네트워크",
                   tailQuestion: ["삽입 정렬의 시간 복잡도와 최악의 경우 시간 복잡도는 각각 무엇인가요?"])
    ]
}
